/*
 Generated by typeshare 1.0.0
*/

export interface Dividend {
	isin: string;
	date: Date;
	amount: string;
	broker: string;
	currency: string;
	amount_eur: string;
	withholding_tax: string;
	witholding_tax_currency: string;
}

export interface PerformanceSignal {
	date: Date;
	total_value: string;
	total_invested: string;
}

export interface Position {
	isin: string;
	units: string;
}

export interface PositionWithName {
	isin: string;
	name: string;
	units: string;
}

export interface PositionWithValueAndAllocation {
	isin: string;
	name: string;
	value: string;
	units: string;
	share: string;
}

export interface PortfolioEvent {
	date: Date;
	event_type: EventType;
	currency: string;
	units: string;
	price_unit: string;
	identifier?: string;
	direction?: TradeDirection;
	applied_fx_rate?: string;
	withholding_tax_percent?: string;
	total: string;
	broker: string;
}

export interface PortfolioPerformance {
	generated_at: number;
	actual: string;
	simulated: string;
	alpha: string;
	position: PositionPerformance[];
}

export interface PositionPerformance {
	isin: string;
	name: string;
	unrealized: string;
	realized: string;
	performance: string;
	simulated: string;
	alpha: string;
	invested_amount: string;
	total_return: string;
}

export interface PortfolioOverview {
	generated_at: number;
	total_value: string;
	realized: string;
	total_return_abs: string;
	total_return_rel: string;
	positions: PositionWithValueAndAllocation[];
}

export interface AnnualTaxableAmounts {
	cashInterest: string;
	shareLendingInterest: string;
	capitalGains: string;
	capitalLosses: string;
	dividends: string;
	fxAppreciation: string;
	witheldTaxDividends: string;
	withheldTaxInterest: string;
	dividendAequivalents: string;
}

export interface TaxationReport {
	created_at: Date;
	taxable_amounts: any;
	securities_wacs: any;
	currency_wacs: any;
}

export interface Wac {
	units: string;
	average_cost: string;
}

export interface SecWac {
	units: string;
	average_cost: string;
	weighted_avg_fx_rate: string;
}

export enum TradeDirection {
	Buy = "Buy",
	Sell = "Sell",
}

export enum EventType {
	CashInterest = "CashInterest",
	ShareInterest = "ShareInterest",
	Dividend = "Dividend",
	Trade = "Trade",
	FxConversion = "FxConversion",
	DividendAequivalent = "DividendAequivalent",
}

