/*
 Generated by typeshare 1.0.0
*/

export interface Dividend {
	isin: string;
	date: Date;
	amount: number;
	broker: string;
	currency: string;
	amount_eur: number;
	withholding_tax: number;
	witholding_tax_currency: string;
}

export interface PerformanceSignal {
	date: Date;
	total_value: number;
	total_invested: number;
}

export interface Position {
	isin: string;
	units: number;
}

export interface PositionWithValueAndAllocation {
	isin: string;
	name: string;
	value: number;
	units: number;
	share: number;
}

export interface PortfolioEvent {
	date: Date;
	event_type: EventType;
	currency: string;
	units: number;
	price_unit: number;
	identifier?: string;
	direction?: TradeDirection;
	applied_fx_rate?: number;
	withholding_tax_percent?: number;
}

export interface PortfolioPerformance {
	generated_at: number;
	actual: number;
	simulated: number;
	alpha: number;
	position: PositionPerformance[];
}

export interface PositionPerformance {
	isin: string;
	name: string;
	unrealized: number;
	realized: number;
	performance: number;
	simulated: number;
	alpha: number;
	invested_amount: number;
	total_return: number;
}

export interface PortfolioOverview {
	generated_at: number;
	total_value: number;
	realized: number;
	total_return_abs: number;
	total_return_rel: number;
	positions: PositionWithValueAndAllocation[];
}

export interface AnnualTaxableAmounts {
	Cash Interest: number;
	Share Lending Interest: number;
	Capital Gains: number;
	Capital Losses: number;
	Dividends: number;
	FX Appreciation: number;
	Withheld Tax (Dividends): number;
	Withheld Tax (Interest): number;
	Dividend Equivalents: number;
}

export interface TaxationReport {
	created_at: Date;
	taxable_amounts: BTreeMap<number, AnnualTaxableAmounts>;
	securities_wacs: BTreeMap<string, SecWac>;
	currency_wacs: BTreeMap<string, Wac>;
}

export interface Wac {
	units: number;
	average_cost: number;
}

export interface SecWac {
	units: number;
	average_cost: number;
	weighted_avg_fx_rate: number;
}

export enum TradeDirection {
	Buy = "Buy",
	Sell = "Sell",
}

export enum EventType {
	CashInterest = "CashInterest",
	ShareInterest = "ShareInterest",
	Dividend = "Dividend",
	Trade = "Trade",
	FxConversion = "FxConversion",
	DividendAequivalent = "DividendAequivalent",
}

